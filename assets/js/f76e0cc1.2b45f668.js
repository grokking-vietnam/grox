"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[704],{3905:(e,r,n)=>{n.d(r,{Zo:()=>l,kt:()=>f});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=t.createContext({}),c=function(e){var r=t.useContext(p),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},l=function(e){var r=c(e.components);return t.createElement(p.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=c(n),f=o,g=u["".concat(p,".").concat(f)]||u[f]||m[f]||a;return n?t.createElement(g,s(s({ref:r},l),{},{components:n})):t.createElement(g,s({ref:r},l))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=u;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1235:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var t=n(7462),o=(n(7294),n(3905));const a={},s="Grox Grammar",i={unversionedId:"grox/grammar",id:"grox/grammar",title:"Grox Grammar",description:"Expression",source:"@site/../grox-docs/target/mdoc/grox/grammar.md",sourceDirName:"grox",slug:"/grox/grammar",permalink:"/grox/docs/grox/grammar",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../grox-docs/target/mdoc/grox/grammar.md",tags:[],version:"current",frontMatter:{}},p={},c=[{value:"Expression",id:"expression",level:2},{value:"Expression (ordered grammar, for parser)",id:"expression-ordered-grammar-for-parser",level:2},{value:"Statements",id:"statements",level:2}],l={toc:c};function m(e){let{components:r,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"grox-grammar"},"Grox Grammar"),(0,o.kt)("h2",{id:"expression"},"Expression"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'expression     -> literal\n               | unary\n               | binary\n               | grouping ;\n\nliteral        -> NUMBER | STRING | "true" | "false" | "nil" ;\nlogical\ngrouping       -> "(" expression ")" ;\nunary          -> ( "-" | "!" ) expression ;\nbinary         -> expression operator expression ;\noperator       -> "==" | "!=" | "<" | "<=" | ">" | ">="\n               | "+"  | "-"  | "*" | "/" ;\n')),(0,o.kt)("h2",{id:"expression-ordered-grammar-for-parser"},"Expression (ordered grammar, for parser)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'expression    -> IDENTIFIER "=" assignment\n               | logic_or ;\nlogic_or      -> logic_and ( "or" logic_and )* ;\nlogic_and     -> equality ( "and" equality )* ;\nassignment    -> IDENTIFIER "=" assignment | equality\nequality      -> comparison (("!=" | "==") comparison)*\ncomparison    -> factor (("<" | "<=" | ">" | ">=") factor)*\nfactor        -> term (("+" | "-") term)*\nterm          -> unary (("*" | "/") unary)*\nunary         -> ("-" | "!") unary\n              | primary\nprimary       -> "true" | "false" | "nil"\n              | NUMBER | STRING\n              | "(" expression ")"\n              | IDENTIFIER ;\ngrouping     -> "(" expression ")"\n')),(0,o.kt)("h2",{id:"statements"},"Statements"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'statement      \u2192 exprStmt\n               | forStmt\n               | ifStmt\n               | printStmt\n               | returnStmt\n               | whileStmt\n               | block ;\n\nexprStmt       \u2192 expression ";" ;\nforStmt        \u2192 "for" "(" ( varDecl | exprStmt | ";" )\n                           expression? ";"\n                           expression? ")" statement ;\nifStmt         \u2192 "if" "(" expression ")" statement\n                 ( "else" statement )? ;\nprintStmt      \u2192 "print" expression ";" ;\nreturnStmt     \u2192 "return" expression? ";" ;\nwhileStmt      \u2192 "while" "(" expression ")" statement ;\n\nblock          \u2192 "{" declaration* "}" ;\ndeclaration    \u2192 classDecl\n               | funDecl\n               | varDecl\n               | statement ;\nclassDecl      \u2192 "class" IDENTIFIER ( "<" IDENTIFIER )?\n                 "{" function* "}" ;\nfunDecl        \u2192 "fun" function ;\nvarDecl        \u2192 "var" IDENTIFIER ( "=" expression )? ";" ;\n\nfunction       \u2192 IDENTIFIER "(" parameters? ")" block ;\nparameters     \u2192 IDENTIFIER ( "," IDENTIFIER )* ;\narguments      \u2192 expression ( "," expression )* ;\n')))}m.isMDXComponent=!0}}]);