"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[704],{3905:function(r,e,n){n.d(e,{Zo:function(){return u},kt:function(){return f}});var t=n(7294);function o(r,e,n){return e in r?Object.defineProperty(r,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):r[e]=n,r}function a(r,e){var n=Object.keys(r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(r);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.push.apply(n,t)}return n}function i(r){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(r,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(n,e))}))}return r}function c(r,e){if(null==r)return{};var n,t,o=function(r,e){if(null==r)return{};var n,t,o={},a=Object.keys(r);for(t=0;t<a.length;t++)n=a[t],e.indexOf(n)>=0||(o[n]=r[n]);return o}(r,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(r);for(t=0;t<a.length;t++)n=a[t],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(r,n)&&(o[n]=r[n])}return o}var p=t.createContext({}),s=function(r){var e=t.useContext(p),n=e;return r&&(n="function"==typeof r?r(e):i(i({},e),r)),n},u=function(r){var e=s(r.components);return t.createElement(p.Provider,{value:e},r.children)},m={inlineCode:"code",wrapper:function(r){var e=r.children;return t.createElement(t.Fragment,{},e)}},l=t.forwardRef((function(r,e){var n=r.components,o=r.mdxType,a=r.originalType,p=r.parentName,u=c(r,["components","mdxType","originalType","parentName"]),l=s(n),f=o,g=l["".concat(p,".").concat(f)]||l[f]||m[f]||a;return n?t.createElement(g,i(i({ref:e},u),{},{components:n})):t.createElement(g,i({ref:e},u))}));function f(r,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof r||o){var a=n.length,i=new Array(a);i[0]=l;var c={};for(var p in e)hasOwnProperty.call(e,p)&&(c[p]=e[p]);c.originalType=r,c.mdxType="string"==typeof r?r:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}l.displayName="MDXCreateElement"},1235:function(r,e,n){n.r(e),n.d(e,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return l}});var t=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],c={},p="Grox Grammar",s={unversionedId:"grox/grammar",id:"grox/grammar",title:"Grox Grammar",description:"Expression",source:"@site/../grox-docs/target/mdoc/grox/grammar.md",sourceDirName:"grox",slug:"/grox/grammar",permalink:"/grox/docs/grox/grammar",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../grox-docs/target/mdoc/grox/grammar.md",tags:[],version:"current",frontMatter:{}},u=[{value:"Expression",id:"expression",children:[],level:2},{value:"Expression (ordered grammar, for parser)",id:"expression-ordered-grammar-for-parser",children:[],level:2}],m={toc:u};function l(r){var e=r.components,n=(0,o.Z)(r,i);return(0,a.kt)("wrapper",(0,t.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"grox-grammar"},"Grox Grammar"),(0,a.kt)("h2",{id:"expression"},"Expression"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'expression     \u2192 literal\n               | unary\n               | binary\n               | grouping ;\n\nliteral        \u2192 NUMBER | STRING | "true" | "false" | "nil" ;\ngrouping       \u2192 "(" expression ")" ;\nunary          \u2192 ( "-" | "!" ) expression ;\nbinary         \u2192 expression operator expression ;\noperator       \u2192 "==" | "!=" | "<" | "<=" | ">" | ">="\n               | "+"  | "-"  | "*" | "/" ;\n')),(0,a.kt)("h2",{id:"expression-ordered-grammar-for-parser"},"Expression (ordered grammar, for parser)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'expression    -> equality\nequality      -> comparison (("!=" | "==") comparison)*\ncomparison    -> factor (("<" | "<=" | ">" | ">=") factor)*\nfactor        -> term (("+" | "-") term)* \nterm          -> unary (("*" | "/") unary)*\nunary         -> ("-" | "!") unary \n              | primary\nprimary       -> NUMBER | STRING | "true" | "false" | "nil" \n              | grouping\ngrouping     -> "(" expression ")"\n')))}l.isMDXComponent=!0}}]);