"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[530],{3905:function(n,t,e){e.d(t,{Zo:function(){return h},kt:function(){return u}});var r=e(7294);function a(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function c(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function i(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?c(Object(e),!0).forEach((function(t){a(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):c(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function l(n,t){if(null==n)return{};var e,r,a=function(n,t){if(null==n)return{};var e,r,a={},c=Object.keys(n);for(r=0;r<c.length;r++)e=c[r],t.indexOf(e)>=0||(a[e]=n[e]);return a}(n,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(n);for(r=0;r<c.length;r++)e=c[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(a[e]=n[e])}return a}var p=r.createContext({}),o=function(n){var t=r.useContext(p),e=t;return n&&(e="function"==typeof n?n(t):i(i({},t),n)),e},h=function(n){var t=o(n.components);return r.createElement(p.Provider,{value:t},n.children)},g={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(n,t){var e=n.components,a=n.mdxType,c=n.originalType,p=n.parentName,h=l(n,["components","mdxType","originalType","parentName"]),s=o(e),u=a,m=s["".concat(p,".").concat(u)]||s[u]||g[u]||c;return e?r.createElement(m,i(i({ref:t},h),{},{components:e})):r.createElement(m,i({ref:t},h))}));function u(n,t){var e=arguments,a=t&&t.mdxType;if("string"==typeof n||a){var c=e.length,i=new Array(c);i[0]=s;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=n,l.mdxType="string"==typeof n?n:a,i[1]=l;for(var o=2;o<c;o++)i[o]=e[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,e)}s.displayName="MDXCreateElement"},7766:function(n,t,e){e.r(t),e.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return o},toc:function(){return h},default:function(){return s}});var r=e(7462),a=e(3366),c=(e(7294),e(3905)),i=["components"],l={},p="Representing Code",o={unversionedId:"book/representing-code",id:"book/representing-code",title:"Representing Code",description:"\u1ede ph\u1ea7n tr\u01b0\u1edbc, ch\xfang ta \u0111\xe3 th\u1eed bi\u1ebfn \u0111\u1ed5i source code t\u1eeb d\u1ea1ng raw sang m\u1ed9t list tokens. H\xf4m nay, ch\xfang ta s\u1ebd ti\u1ebfp t\u1ee5c bi\u1ec3u di\u1ec5n list token n\xe0y sang 1 d\u1ea1ng ph\u1ee9c t\u1ea1p v\xe0 \u0111\u1ea7y \u0111\u1ee7 h\u01a1n.",source:"@site/../grox-docs/target/mdoc/book/representing-code.md",sourceDirName:"book",slug:"/book/representing-code",permalink:"/grox/docs/book/representing-code",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../grox-docs/target/mdoc/book/representing-code.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Scanning",permalink:"/grox/docs/book/scanning"},next:{title:"Parser Combinators",permalink:"/grox/docs/fp/parser-combinators"}},h=[{value:"Context-Free Grammars",id:"context-free-grammars",children:[],level:2},{value:"Rules for grammars",id:"rules-for-grammars",children:[],level:2},{value:"A Grammar for Lox expressions",id:"a-grammar-for-lox-expressions",children:[],level:2},{value:"Implementing Syntax Trees",id:"implementing-syntax-trees",children:[{value:"Modelling Data with Algebraic Data Type",id:"modelling-data-with-algebraic-data-type",children:[],level:3}],level:2},{value:"Working with Trees",id:"working-with-trees",children:[],level:2},{value:"A (Not Very) Pretty Printer",id:"a-not-very-pretty-printer",children:[],level:2}],g={toc:h};function s(n){var t=n.components,e=(0,a.Z)(n,i);return(0,c.kt)("wrapper",(0,r.Z)({},g,e,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"representing-code"},"Representing Code"),(0,c.kt)("p",null,"\u1ede ph\u1ea7n tr\u01b0\u1edbc, ch\xfang ta \u0111\xe3 th\u1eed bi\u1ebfn \u0111\u1ed5i source code t\u1eeb d\u1ea1ng raw sang m\u1ed9t list tokens. H\xf4m nay, ch\xfang ta s\u1ebd ti\u1ebfp t\u1ee5c bi\u1ec3u di\u1ec5n list token n\xe0y sang 1 d\u1ea1ng ph\u1ee9c t\u1ea1p v\xe0 \u0111\u1ea7y \u0111\u1ee7 h\u01a1n."),(0,c.kt)("p",null,"\u0110\u1ea7u ti\xean, ch\xfang ta s\u1ebd b\u1eaft \u0111\u1ea7u v\u1edbi 1 v\xed d\u1ee5 \u0111\u01a1n gi\u1ea3n, l\xe0m th\u1ebf n\xe0o \u0111\u1ec3 t\xednh bi\u1ec3u th\u1ee9c sau:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"1 + 2 * 3 - 4\n")),(0,c.kt)("p",null,'Ch\xfang ta \u0111\u1ec1u bi\u1ebft quy t\u1eafc gi\u1ea3i b\xe0i to\xe1n n\xe0y \u0111\xf3 l\xe0 "nh\xe2n chia tr\u01b0\u1edbc, c\u1ed9ng tr\u1eeb sau". Tr\xean m\xe1y t\xednh, n\xf3 c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n b\u1eb1ng c\u1ea5u tr\xfac c\xe2y. Trong \u0111\xf3, s\u1ed1 l\xe0 c\xe1c node l\xe1 v\xe0 to\xe1n t\u1eed l\xe0 c\xe1c node trong. '),(0,c.kt)("p",null,(0,c.kt)("img",{parentName:"p",src:"https://craftinginterpreters.com/image/representing-code/tree-evaluate.png",alt:null})),(0,c.kt)("p",null,"\u0110\u1ec3 t\xednh \u0111\u01b0\u1ee3c gi\xe1 tr\u1ecb c\u1ee7a bi\u1ec3u th\u1ee9c, ch\xfang ta s\u1ebd ph\u1ea3i t\xednh gi\xe1 tr\u1ecb c\u1ee7a c\xe1c c\xe2y con tr\u01b0\u1edbc. T\u1ee9c l\xe0 ch\xfang ta ph\u1ea3i th\u1ef1c hi\u1ec7n duy\u1ec7t c\xe2y (tree traversal), trong v\xed d\u1ee5 n\xe0y ch\xfang ta s\u1ebd th\u1ef1c hi\u1ec7n post-order traversal."),(0,c.kt)("p",null,"Ch\xfang ta th\u1ea5y l\xe0 n\u1ebfu d\xf9ng c\u1ea5u tr\xfac c\xe2y \u0111\u1ec3 bi\u1ec3u di\u1ec5n bi\u1ec3u th\u1ee9c tr\xean th\xec vi\u1ec7c t\xednh to\xe1n tr\xf4ng kh\xe1 d\u1ec5 d\xe0ng. V\u1eady 1 c\xe1ch tr\u1ef1c quan nh\u1ea5t, li\u1ec7u ch\xfang ta c\xf3 th\u1ec3 bi\u1ec3u di\u1ec5n grammar c\u1ee7a ng\xf4n ng\u1eef l\u1eadp tr\xecnh d\u01b0\u1edbi d\u1ea1ng d\u1ea1ng c\xe2y hay kh\xf4ng?"),(0,c.kt)("h2",{id:"context-free-grammars"},"Context-Free Grammars"),(0,c.kt)("p",null,"\u1ede b\xe0i tr\u01b0\u1edbc, ch\xfang ta c\u0169ng \u0111\xe3 s\u1eed d\u1ee5ng lexical grammar \u0111\u1ec3 \u0111\u1ecbnh ngh\u0129a c\xe1c tokens. V\u1edbi Scanner th\xec c\xe1ch l\xe0m n\xe0y r\u1ea5t hi\u1ec7u qu\u1ea3 nh\u01b0ng kh\xf4ng \u0111\u1ee7 \u0111\u1ec3 handle c\xe1c bi\u1ec3u th\u1ee9c l\u1ed3ng nhau r\u1ea5t ph\u1ee9c t\u1ea1p."),(0,c.kt)("p",null,"V\xec v\u1eady, ch\xfang ta s\u1ebd c\u1ea7n \u0111\u1ebfn ",(0,c.kt)("strong",{parentName:"p"},"context-free grammar (CFG)"),".  C\xf4ng c\u1ee5 m\u1ea1nh nh\u1ea5t trong c\xe1c ",(0,c.kt)("a",{parentName:"p",href:"https://vi.wikipedia.org/wiki/Ng%C3%B4n_ng%E1%BB%AF_h%C3%ACnh_th%E1%BB%A9c"},"ng\xf4n ng\u1eef h\xecnh th\u1ee9c")),(0,c.kt)("blockquote",null,(0,c.kt)("p",{parentName:"blockquote"},"M\u1ed9t ",(0,c.kt)("strong",{parentName:"p"},"ng\xf4n ng\u1eef h\xecnh th\u1ee9c")," (",(0,c.kt)("em",{parentName:"p"},"formal language"),") \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a l\xe0 m\u1ed9t t\u1eadp c\xe1c chu\u1ed7i (",(0,c.kt)("em",{parentName:"p"},"string"),") \u0111\u01b0\u1ee3c x\xe2y d\u1ef1ng d\u1ef1a tr\xean m\u1ed9t ",(0,c.kt)("a",{parentName:"p",href:"https://vi.wikipedia.org/wiki/B%E1%BA%A3ng_ch%E1%BB%AF_c%C3%A1i",title:"B\u1ea3ng ch\u1eef c\xe1i"},"b\u1ea3ng ch\u1eef c\xe1i")," (",(0,c.kt)("em",{parentName:"p"},"alphabet"),"), v\xe0 ch\xfang \u0111\u01b0\u1ee3c r\xe0ng bu\u1ed9c b\u1edfi c\xe1c ",(0,c.kt)("a",{parentName:"p",href:"https://vi.wikipedia.org/wiki/Lu%E1%BA%ADt",title:"Lu\u1eadt"},"lu\u1eadt")," (",(0,c.kt)("em",{parentName:"p"},"rule"),") ho\u1eb7c ",(0,c.kt)("a",{parentName:"p",href:"https://vi.wikipedia.org/wiki/V%C4%83n_ph%E1%BA%A1m",title:"V\u0103n ph\u1ea1m"},"v\u0103n ph\u1ea1m")," (",(0,c.kt)("em",{parentName:"p"},"grammar"),") \u0111\xe3 \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc."),(0,c.kt)("p",{parentName:"blockquote"},"Wikipedia")),(0,c.kt)("p",null,"B\u1ea3ng ch\u1eef c\xe1i \u1edf \u0111\xe2y c\xf3 th\u1ec3 l\u1ea5y t\u1eeb ng\xf4n ng\u1eef t\u1ef1 nhi\xean ho\u1eb7c t\u1ef1 \u0111\u1ecbnh ngh\u0129a"),(0,c.kt)("table",null,(0,c.kt)("thead",{parentName:"table"},(0,c.kt)("tr",{parentName:"thead"},(0,c.kt)("th",{parentName:"tr",align:null},"Terminology"),(0,c.kt)("th",{parentName:"tr",align:null}),(0,c.kt)("th",{parentName:"tr",align:null},"Lexical grammar"),(0,c.kt)("th",{parentName:"tr",align:null},"Syntactic grammar"))),(0,c.kt)("tbody",{parentName:"table"},(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"The \u201calphabet\u201d is\u2009.\u2009.\u2009."),(0,c.kt)("td",{parentName:"tr",align:null},"\u2192\u2002"),(0,c.kt)("td",{parentName:"tr",align:null},"Characters"),(0,c.kt)("td",{parentName:"tr",align:null},"Tokens")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"A \u201cstring\u201d is\u2009.\u2009.\u2009."),(0,c.kt)("td",{parentName:"tr",align:null},"\u2192\u2002"),(0,c.kt)("td",{parentName:"tr",align:null},"Lexeme or token"),(0,c.kt)("td",{parentName:"tr",align:null},"Expression")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"It\u2019s implemented by the\u2009.\u2009.\u2009."),(0,c.kt)("td",{parentName:"tr",align:null},"\u2192\u2002"),(0,c.kt)("td",{parentName:"tr",align:null},"Scanner"),(0,c.kt)("td",{parentName:"tr",align:null},"Parser")))),(0,c.kt)("h2",{id:"rules-for-grammars"},"Rules for grammars"),(0,c.kt)("p",null,"Ch\xfang ta c\u1ea7n ph\u1ea3i \u0111\u1ecbnh ngh\u0129a m\u1ed9t t\u1eadp gi\u1edbi h\u1ea1n c\xe1c quy t\u1eafc (rule) \u0111\u1ec3 t\u1ea1o ra c\xe1c strings. Rules trong tr\u01b0\u1eddng h\u1ee3p n\xe0y g\u1ecdi l\xe0 ",(0,c.kt)("strong",{parentName:"p"},"productions")," v\xec ch\xfang ",(0,c.kt)("em",{parentName:"p"},"produce")," ra c\xe1c strings."),(0,c.kt)("p",null,"M\u1ed7i production(rule) trong CFG c\xf3 ph\u1ea7n \u0111\u1ea7u (head) - t\xean v\xe0 ph\u1ea7n th\xe2n (body) m\xf4 t\u1ea3 n\xf3 s\u1ebd t\u1ea1o ra c\xe1i g\xec. \u1ede d\u1ea1ng c\u01a1 b\u1ea3n nh\u1ea5t th\xec, ph\u1ea7n th\xe2n ch\u1ec9 bao g\u1ed3m m\u1ed9t danh s\xe1ch c\xe1c k\xed hi\u1ec7u (Symbols). C\xe1c k\xed hi\u1ec7u c\xf3 2 ki\u1ec3u:"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("strong",{parentName:"li"},"Terminal")," l\xe0 m\u1ed9t ch\u1eef c\xe1i trong b\u1ea3ng ch\u1eef c\xe1i. Ch\xfang ta c\xf3 th\u1ec3 ngh\u0129 n\xf3 nh\u01b0 l\xe0 m\u1ed9t literal. Trong syntactic grammar n\xf3 l\xe0 c\xe1c token ch\xfang ta \u0111\xe3 c\xf3 \u0111\u01b0\u1ee3c t\u1eeb Scanner."),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("strong",{parentName:"li"},"Nonterminal")," d\xf9ng \u0111\u1ec3 ch\u1ec9 \u0111\u1ebfn 1 rule trong gammar.")),(0,c.kt)("p",null,"Ch\u1ec9 c\xf2n 1 \u0111i\u1ec1u cu\u1ed1i c\xf9ng c\u1ea7n ph\u1ea3i l\u01b0u \xfd:  Ch\xfang ta c\xf3 th\u1ec3 c\xf3 nhi\u1ec1u rules c\xf3 c\xf9ng t\xean. Khi ch\xfang ta g\u1eb7p m\u1ed9t nonterminal v\u1edbi 1 t\xean n\xe0o \u0111\xf3 ch\xfang ta \u0111\u01b0\u1ee3c ph\xe9p ch\u1ecdn 1 rule b\u1ea5t k\xec cho n\xf3."),(0,c.kt)("p",null,"\u0110\u1ec3 bi\u1ec3u di\u1ec5n \u0111\u01b0\u1ee3c 1 c\xe1ch c\u1ee5 th\u1ec3 h\u01a1n, ch\xfang ta c\u1ea7n m\u1ed9t c\xe1ch \u0111\u1ec3 vi\u1ebft ra c\xe1c production rules n\xe0y. Ng\u01b0\u1eddi ta \u0111\xe3 t\xecm c\xe1ch th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\xe0y t\u1eeb h\xe0ng ng\xe0n n\u0103m v\u1ec1 tr\u01b0\u1edbc v\xe0 cho \u0111\u1ebfn khi John Backus v\xe0 c\xf4ng ty c\u1ee7a \xf4ng c\u1ea7n n\xf3 cho ng\xf4n ng\u1eef ALGOL 58 v\xe0 cu\u1ed1i c\xf9ng t\u1ea1o ra ",(0,c.kt)("strong",{parentName:"p"},"Backus-Naur form (BNF)"),". V\xe0 k\u1ec3 t\u1eeb \u0111\xf3, h\u1ea7u h\u1ebft m\u1ecdi ng\u01b0\u1eddi \u0111\u1ec3 s\u1eed d\u1ee5ng BNF (ho\u1eb7c bi\u1ebfn \u0111\u1ed5i c\u1ee7a BNF)."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},'breakfast  \u2192 protein "with" breakfast "on the side" ;\nbreakfast  \u2192 protein ;\nbreakfast  \u2192 bread ;\n\nprotein    \u2192 crispiness "crispy" "bacon" ;\nprotein    \u2192 "sausage" ;\nprotein    \u2192 cooked "eggs" ;\n\ncrispiness \u2192 "really" ;\ncrispiness \u2192 "really" crispiness ;\n\ncooked     \u2192 "scrambled" ;\ncooked     \u2192 "poached" ;\ncooked     \u2192 "fried" ;\n\nbread      \u2192 "toast" ;\nbread      \u2192 "biscuits" ;\nbread      \u2192 "English muffin" ;\n')),(0,c.kt)("p",null,"T\u1eeb \u0111\xf3 ch\xfang ta c\xf3 th\u1ec3 vi\u1ebft ra c\xe1c strings d\u1ef1a tr\xean BNF \u1edf tr\xean:"),(0,c.kt)("p",null,(0,c.kt)("img",{parentName:"p",src:"https://craftinginterpreters.com/image/representing-code/breakfast.png",alt:null})),(0,c.kt)("h2",{id:"a-grammar-for-lox-expressions"},"A Grammar for Lox expressions"),(0,c.kt)("p",null,"Syntatic Grammar ph\u1ee9c t\u1ea1p h\u01a1n Lexical Grammar r\u1ea5t l\xe0 nhi\u1ec1u, v\xec v\u1eady r\u1ea5t kh\xf3 \u0111\u1ec3 tr\xecnh b\xe0y \u0111\u01b0\u1ee3c to\xe0n b\u1ed9 SG trong 1 l\u1ea7n gi\u1ed1ng nh\u01b0 c\xe1ch ch\xfang ta l\xe0m \u1edf ph\u1ea7n Scanner. V\xec v\u1eady, ch\xfang ta s\u1ebd nghi\u1ec1n ng\u1eabm t\u1eebng t\u1eadp con c\u1ee7a ng\xf4n ng\u1eef v\xe0 th\xeam syntax m\u1edbi trong c\xe1c ch\u01b0\u01a1ng ti\u1ebfp theo. Hi\u1ec7n t\u1ea1i, ch\xfang ta s\u1ebd ch\u1ec9 quan t\xe2m \u0111\u1ebfn expression:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},'expression     \u2192 literal\n               | unary\n               | binary\n               | grouping ;\n\nliteral        \u2192 NUMBER | STRING | "true" | "false" | "nil" ;\ngrouping       \u2192 "(" expression ")" ;\nunary          \u2192 ( "-" | "!" ) expression ;\nbinary         \u2192 expression operator expression ;\noperator       \u2192 "==" | "!=" | "<" | "<=" | ">" | ">="\n               | "+"  | "-"  | "*" | "/" ;\n')),(0,c.kt)("p",null,"Tr\xean \u0111\xe2y l\xe0 c\xe1c rule \u0111\u1ec3 ch\xfang ta c\xf3 th\u1ec3 bi\u1ec3u di\u1ec5n \u0111\u01b0\u1ee3c 1 expression gi\u1ed1ng nh\u01b0 sau:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"1 - (2 * 3) < 4 == false\n")),(0,c.kt)("h2",{id:"implementing-syntax-trees"},"Implementing Syntax Trees"),(0,c.kt)("p",null,"D\u1ec5 th\u1ea5y, grammar c\u1ee7a ch\xfang ta c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n b\u1eb1ng c\u1ea5u tr\xfac c\xe2y. B\u1edfi v\xec c\u1ea5u tr\xfac n\xe0y \u0111\u01b0\u1ee3c d\xf9ng \u0111\u1ec3 bi\u1ec3u di\u1ec5n syntax cho ng\xf4n ng\u1eef grox n\xean n\xf3 \u0111\u01b0\u1ee3c g\u1ecdi l\xe0 ",(0,c.kt)("strong",{parentName:"p"},"syntax tree.")),(0,c.kt)("h3",{id:"modelling-data-with-algebraic-data-type"},"Modelling Data with Algebraic Data Type"),(0,c.kt)("p",null,"Trong FP, ADT l\xe0 m\u1ed9t ki\u1ec3u d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c t\u1ea1o n\xean b\u1eb1ng c\xe1ch k\u1ebft h\u1ee3p c\xe1c ki\u1ec3u d\u1eef li\u1ec7u kh\xe1c."),(0,c.kt)("p",null,"V\xed d\u1ee5 1: 1 bi\u1ec3u th\u1ee9c Binary s\u1ebd ",(0,c.kt)("strong",{parentName:"p"},"c\xf3")," v\u1ebf tr\xe1i, v\u1ec1 ph\xe1i v\xe0 1 to\xe1n t\u1eed. Trong Scala ch\xfang ta c\xf3 th\u1ec3 bi\u1ec3u di\u1ec5n ki\u1ec3u Binary b\u1eb1ng 1 case class:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"case class Binary(left: Expr, operator: Operator, right: Expr)\n")),(0,c.kt)("p",null,"Khi \u0111\xf3, Binary \u0111\u01b0\u1ee3c g\u1ecdi l\xe0 1 Product Type"),(0,c.kt)("p",null,"V\xed d\u1ee5 2: 1 Literal ",(0,c.kt)("strong",{parentName:"p"},"c\xf3 th\u1ec3 l\xe0")," Number ho\u1eb7c String. V\u1edbi Scala ch\xfang ta c\xf3 th\u1ec3 bi\u1ec3u di\u1ec5u Literal b\u1eb1ng Enum ho\u1eb7c Union Type"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"type Literal = Str | Number\nenum Literal:\n  case Str, Number\n")),(0,c.kt)("p",null,"Khi \u0111\xf3, Literal \u0111\u01b0\u1ee3c g\u1ecdi l\xe0 1 Sum type"),(0,c.kt)("p",null,"Trong Scala 3, kh\xe1i ni\u1ec7m ",(0,c.kt)("inlineCode",{parentName:"p"},"enum")," \u0111\u1ec3 r\u1ed9ng \u0111\u1ec3 c\xf3 th\u1ec3 bi\u1ec3u di\u1ec5n lu\xf4n m\u1ed9t ADT ho\xe0n ch\u1ec9nh hay th\u1eadm ch\xed l\xe0 m\u1ed9t Generalize ADT (GADT)."),(0,c.kt)("p",null,"V\xed d\u1ee5 ch\xfang ta c\xf3 th\u1ec3 \u0111\u1ecbnh ngh\u0129a expression c\u1ee7a grammar tr\xean trong Scala 3 nh\u01b0 sau:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"enum Expr:\n  case Binary(left: Expr, o: Operator, right: Expr)\n  case Unary(o: Operator, expr: Expr)\n  case Grouping(expr: Expr)\n  case Literal(o: Str | Number)\n")),(0,c.kt)("p",null,"Tuy nhi\xean \u1edf ch\u01b0\u01a1ng n\xe0y, ch\xfang ta s\u1ebd define Expr m\u1ed9t c\xe1ch t\u01b0\u1eddng minh h\u01a1n b\u1eb1ng c\xe1ch t\xe1ch bi\u1ec7t Binary th\xe0nh c\xe1c ph\xe9p to\xe1n s\u1ed1 h\u1ecdc nh\u01b0 b\xean d\u01b0\u1edbi:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-scala"},"enum Expr:\n  case Add(left: Expr, right: Expr)\n  case Subtract(left: Expr, right: Expr)\n  case Multiply(left: Expr, right: Expr)\n  case Divide(left: Expr, right: Expr)\n  case Negate(expr: Expr)\n  case Minus(expr: Expr)\n  case Number(value: Int | Double)\n  case Str(value: String)\n  case Grouping(expr: Expr)\n")),(0,c.kt)("p",null,"\u0110\u1ec3 \u0111\u01a1n gi\u1ea3n, trong ch\u01b0\u01a1ng n\xe0y ch\xfang ta s\u1ebd quan t\xe2m \u0111\u1ebfn m\u1ed9t s\u1ed1 ph\xe9p t\xednh s\u1ed1 h\u1ecdc, trong c\xe1c ph\u1ea7n sau ch\xfang ta s\u1ebd t\xecm hi\u1ec3u th\xeam v\u1ec1 c\xe1c bi\u1ec3u th\u1ee9c logic."),(0,c.kt)("h2",{id:"working-with-trees"},"Working with Trees"),(0,c.kt)("p",null,"OOP vs FP"),(0,c.kt)("p",null,(0,c.kt)("img",{parentName:"p",src:"https://craftinginterpreters.com/image/representing-code/table.png",alt:null})),(0,c.kt)("p",null,"Ch\xfang ta th\u1ea5y r\u1eb1ng, v\u1edbi m\u1ed7i ki\u1ec3u expression ch\xfang ta s\u1ebd c\xf3 1 s\u1ed1 c\xe1c operations \u0111i k\xe8m v\u1edbi n\xf3."),(0,c.kt)("p",null,"Trong c\xe1c ng\xf4n ng\u1eef OOP nh\u01b0 Java, code c\u1ee7a ch\xfang ta th\u01b0\u1eddng s\u1ebd theo h\u01b0\u1edbng l\xe0 c\xe1c \xf4 tr\xean c\xf9ng 1 h\xe0ng s\u1ebd d\xednh li\u1ec1n v\u1edbi nhau. T\u1ee9c l\xe0 c\xe1c ki\u1ec3u expression s\u1ebd share chung v\u1edbi nhau c\xe1c operation."),(0,c.kt)("p",null,(0,c.kt)("img",{parentName:"p",src:"https://craftinginterpreters.com/image/representing-code/rows.png",alt:null})),(0,c.kt)("p",null,'V\xec v\u1eady, khi ch\xfang ta th\xeam 1 ki\u1ec3u expression m\u1edbi, th\xec code c\u1ee7a ch\xfang ta s\u1ebd r\u1ea5t \u0111\u01a1n gi\u1ea3n. Ch\xfang ta kh\xf4ng c\u1ea7n ph\u1ea3i \u0111\u1ed9ng v\xe0o c\xe1c ki\u1ec3u expression \u0111\xe3 c\xf3 m\xe0 ch\u1ec9 c\u1ea7n "extends" th\xeam 1 ki\u1ec3u m\u1edbi. Nh\u01b0ng khi ch\xfang ta mu\u1ed1n th\xeam 1 operation m\u1edbi, th\xec ch\xfang ta ph\u1ea3i quay l\u1ea1i v\xe0 s\u1eeda l\u1ea1i t\u1ea5t c\u1ea3 c\xe1c expression \u0111\xe3 c\xf3.'),(0,c.kt)("p",null,"\u0110\u1ed1i v\u1edbi c\xe1c ng\xf4n ng\u1eef FP nh\u01b0 ML. Type v\xe0 Operation t\xe1ch bi\u1ec7t nhau, m\u1ed7i ki\u1ec3u expression kh\xe1c nhau th\xec ch\xfang c\xf3 c\xe1c operation kh\xe1c nhau cho ki\u1ec3u \u0111\xf3. V\xec v\u1eady, c\xe1c \xf4 trong c\xf9ng 1 c\u1ed9t s\u1ebd d\xednh li\u1ec1n v\u1edbi nhau."),(0,c.kt)("p",null,(0,c.kt)("img",{parentName:"p",src:"https://craftinginterpreters.com/image/representing-code/columns.png",alt:null})),(0,c.kt)("p",null,"Trong FP, khi ch\xfang ta mu\u1ed1n \u0111\u1ecbnh ngh\u0129a 1 function cho nhi\u1ec1u ki\u1ec3u expression kh\xe1c nhau. Ch\xfang ta s\u1ebd d\xf9ng \u0111\u1ebfn pattern matching. Khi ch\xfang ta th\xeam 1 operation m\u1edbi, ch\xfang ta s\u1ebd kh\xf4ng c\u1ea7n s\u1eeda c\xe1c operation kh\xe1c. Tuy nhi\xean, khi ch\xfang ta c\xf3 th\xeam 1 ki\u1ec3u m\u1edbi, ch\xfang ta ph\u1ea3i quay l\u1ea1i v\xe0 s\u1eeda code c\u1ee7a t\u1ea5t c\u1ea3 c\xe1c operation \u0111\xe3 c\xf3."),(0,c.kt)("h2",{id:"a-not-very-pretty-printer"},"A (Not Very) Pretty Printer"),(0,c.kt)("p",null,'Khi ch\xfang ta debug parser, ch\xfang ta th\u01b0\u1eddng ph\u1ea3i debug AST. V\xec v\u1eady ch\xfang ta mu\u1ed1n c\xf3 1 format \u0111\u1eb9p cho AST. Qu\xe1 tr\xecnh convert 1 AST sang string th\u01b0\u1eddng \u0111\u01b0\u1ee3c g\u1ecdi l\xe0 "pretty printing".'),(0,c.kt)("p",null,"Th\u1ebf nh\u01b0ng, 1 printer kh\xf4ng n\xean in ra nh\u1eefng c\xe1i ki\u1ec3u nh\u01b0 ",(0,c.kt)("inlineCode",{parentName:"p"},"1 + 2 * 3")," m\xe0 \u0111\u1ec3 ph\u1ee5c v\u1ee5 debug, ch\xfang ta c\u1ea7n ph\u1ea3i bi\u1ec3u di\u1ec5n xem l\xe0 ph\xe9p to\xe1n n\xe0o \u0111\u01b0\u01a1c th\u1ef1c hi\u1ec7n tr\u01b0\u1edbc, ph\xe9p + hay ph\xe9p * l\xe0 \u0111\u1ec9nh c\u1ee7a c\xe2y."),(0,c.kt)("p",null,(0,c.kt)("img",{parentName:"p",src:"https://craftinginterpreters.com/image/representing-code/expression.png",alt:null})),(0,c.kt)("p",null,"AST \u1edf tr\xean s\u1ebd \u0111\u01b0\u1ee3c in ra l\xe0 (xem sourcecode):"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"(* (- 123) (group 45.67))\n")))}s.isMDXComponent=!0}}]);